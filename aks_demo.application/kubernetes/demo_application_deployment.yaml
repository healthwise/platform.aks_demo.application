#apiVersion: networking.istio.io/v1beta1
#kind: Gateway
#metadata:
#  name: istio-autogenerated-k8s-ingress
#  namespace: istio-ingress
#  labels:
#    app: ingressgateway
#    gateway: http01-solver
#spec:
#  selector:
#    istio: ingressgateway
#  servers:
#  - port:
#      number: 80
#      protocol: HTTP2
#      name: http
#    hosts:
#    - "*"

#---

apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: public-gateway
  namespace: products

spec:
  selector:
    istio: ingressgateway # use Istio default gateway implementation
  servers:
  - port:
      number: 443
      name: https-devops
      protocol: HTTPS
    tls:
      mode: SIMPLE # enables HTTPS on this port
      credentialName: dev-ingress-cert
    hosts:
    - devops.dev.hwapps.net
  - port:
      number: 80
      name: http-devops
      protocol: HTTP
    hosts:
    - devops.dev.hwapps.net  
  - port:
      number: 80
      name: http-aksdemo
      protocol: HTTP
    hosts:
    - aks-istio.dev.hwapps.net
  - port:
      number: 443
      name: https-aksdemo
      protocol: HTTPS
    tls:
      mode: SIMPLE # enables HTTPS on this port
      credentialName: dev-ingress-cert
    hosts:
    - aks-istio.dev.hwapps.net
---

apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: aks-demo-app-primary-route
  namespace: products
spec:
  hosts:
  - "devops.dev.hwapps.net"
  - "aks-istio.dev.hwapps.net"
  gateways:
  - public-gateway
  http:
  - name: "aksdemo-v1-route"
    route:
    - destination:
        port:
          number: 80       
        host: aks-demo-app.products.svc.cluster.local
        subset: v1
  #- name: "aksdemo-v2-route"
  #  route:
  #  - destination:
  #      port:
  #        number: 80       
  #      host: cm-acme-http-solver.istio-ingress.svc.cluster.local
  #      subset: v2
---

apiVersion: v1
kind: Service
metadata:
  name: aks-demo-app
  namespace: products
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
  selector:
    app: aks-demo-app

---

apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: aks-demo-app-destination
  namespace: products
spec:
  host: aks-demo-app # interpreted as aks-demo-app.products.svc.cluster.local
  subsets:
  - name: v1
    labels:
      version: v1
  - name: v2
    labels:
      version: v2
---

apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: products
  name: aks-demo-app
  labels:
    app: aks-demo-app
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
  selector:
    matchLabels:
      app: aks-demo-app
  template:
    metadata:
      labels:
        app: aks-demo-app
        version: v1
        #aadpodidbinding: aks-demo-app-kv    
    spec:      
      containers:
        - name: aks-demo-app          
          image: "acrtestuswproductshw.azurecr.io/aks_demo_app:latest"
          resources:
            limits:
              cpu: 300m # How much CPU should we preallocate for each instance of this container, in millicpus
              memory: 1024Mi # How much RAM should we preallocate for each instance of this container
            requests:
              cpu: 200m # How much CPU should we allow for requests before triggering a new container, in millicpus
              memory: 256Mi # How much RAM should we allow for requests before triggering a new container, in millicpus
          ports:
          - containerPort: 80
      #    volumeMounts:
      #    - name: appsettings
      #      mountPath: "/mnt/appsettings"
      #      readOnly: true    
      #    env:
      #    - name: myOtherNewSecret
      #      valueFrom:
      #        secretKeyRef:
      #          name: appsettings
      #          key: myOtherNewSecret
      #    - name: myNewSecret
      #      valueFrom:
      #        secretKeyRef:
      #          name: appsettings
      #          key: myNewSecret
      #    - name: MySecrets__myOtherNewSecret  #__ lets us create nested app settings in .net
      #      valueFrom:
      #        secretKeyRef:
      #          name: appsettings
      #          key: myNestedOtherNewSecret
      #    - name: MySecrets__myNewSecret
      #      valueFrom:
      #        secretKeyRef:
      #          name: appsettings
      #          key: myNestedNewSecret
      #    - name: myNonSecretAppSetting
      #      value: "I'm not a secret, just a setting"
      #volumes:
      #  - name: appsettings
      #    csi:
      #      driver: secrets-store.csi.k8s.io
      #      readOnly: true
      #      volumeAttributes:
      #        secretProviderClass: aks-demo-app-kv

---

apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  name: aks-demo-app-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: aks-demo-app
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50
  - type: Resource
    resource:
      name: memory
      target:
        type: AverageValue
        averageValue: 500Mi
  # Uncomment these lines if you create the custom packets_per_second metric and
  # configure your app to export the metric.
  # - type: Pods
  #   pods:
  #     metric:
  #       name: packets_per_second
  #     target:
  #       type: AverageValue
  #       averageValue: 100